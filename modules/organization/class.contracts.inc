<?php

userelation("atkmanytoonerelation");
userelation("atkonetomanyrelation");
useattrib("atklistattribute");
useattrib("atkdateattribute");
useattrib("atktextattribute");
useattrib("atknumberattribute");
useattrib("atkdummyattribute");
useattrib("atkboolattribute");
useattrib("atkcurrencyattribute");

//Hack
//The is some bug in class.contracts.inc. No time to fix that now.
//Use project.project instead.
class projectRelation extends atkOneToManyRelation
{
	function _addAddLink($myrecords, $record,$saveform=true)
	{
		$dest = $this->m_destination;
		$this->m_destination = "project.project";
		$url = parent::_addAddLink($myrecords, $record, $saveform);
		$this->m_destination = $dest;
		return $url;
	}
}

class contracts extends atkNode
{
  var $m_archive;

  function contracts()
  {
    $this->atkNode("contracts",NF_ADD_LINK | NF_EDITAFTERADD | NF_EXPORT);

    $this->add(new atkNumberAttribute("id",AF_AUTOKEY));
    $this->add(new atkAttribute("contractnumber",AF_SEARCHABLE|AF_FORCE_LOAD, 20));
    $this->add(new atkAttribute("contractname",AF_SEARCHABLE|AF_OBLIGATORY|AF_FORCE_LOAD));
    $this->add(new atkManyToOneRelation("contracttype","organization.contracttype",AF_SEARCHABLE|AF_OBLIGATORY|AF_RELATION_AUTOLINK));
    $this->add(new atkManyToOneRelation("customer","organization.organization",AF_SEARCHABLE|AF_OBLIGATORY|AF_RELATION_AUTOLINK|AF_LARGE));

    $this->add(new atkListAttribute("billing_type", array("by_period","on_delivery"), array("period","delivery"),AF_LIST_NO_NULL_ITEM | AF_HIDE_LIST));

	  //create sourceattrib
	  $attr = new atkListAttribute("billing_period",array("no_billing_period","monthly","quarterly","yearly", "per_incident"),"",AF_OBLIGATORY|AF_HIDE_LIST);

	  //add listener
	  $attr->addOnChangeHandler("check_billing_period('billing_period', 'ar_period_price', 'period_price');");

    //Add billing_period
    $this->add($attr);

    $this->add(new atkCurrencyAttribute("period_price", AF_HIDE_LIST,13,"",2));
    $this->add(new atkDateAttribute("startdate","","", 0, 0, AF_OBLIGATORY|AF_HIDE_LIST));
    $this->add(new atkDummyAttribute("enddate_expire_warning",atktext("enddate_expire_warning","organization","contracts"),AF_HIDE_LIST));
    $this->add(new atkDateAttribute("enddate","","", 0, 0, AF_OBLIGATORY));
    $this->add(new atkListAttribute("aftercalculation", array("no","yes"), array(0,1),AF_HIDE_LIST | AF_LIST_NO_NULL_ITEM));
    $this->add(new atkNumberAttribute("priceperhour",AF_HIDE_LIST,10,2));

    $this->add(new atkDummyAttribute("status_change_warning", atktext("status_change_warning","organization","contracts"),AF_HIDE_LIST));
    $this->add(new atkListAttribute("status", array("active", "archived"), "", AF_OBLIGATORY|AF_HIDE_LIST));
    $this->add(new atkTextAttribute("description", TEXT_SMALL, AF_OBLIGATORY));
    $this->add(new projectRelation("projects", "organization.contract_project", "contract_id", AF_HIDE_LIST));

    //The linkproject action is allowed by all
    $this->addAllowedAction("linkproject");
    $this->addSecurityMap("export", "admin");

    $this->setTable("contract","contract");
    $this->setOrder("contract.startdate");
  }

  /**
   * Hack! Change display of attribute projects in edit action
   *
   * Add a select link right beside the 'Add project' link. Normally it would
   * only be possible to add the new link under the 'Add project' link because of the <br />
   * that is generated by the edit function of the atkOneToManyRelation.
   *
   * @param array record a record
   * @param string prefix the prefix for the record
   * @param string mode the mode
   * @return string html output of edit-function of atkManyToOneRelation with a brand new 'select' link
   */
  function projects_edit($record, $prefix="", $mode="")
  {
  	$attr = &$this->getAttribute("projects");
  	$result = $attr->edit($record, $prefix, $mode )	;
  	$result = substr($result, 0, -6);										//Remove the '<br />' from the end

  	$target_url = dispatch_url("organization.contracts", "linkproject", array("projectid"=>"[id]", "contractid"=>$record["id"]));
 		$select_url = dispatch_url("organization.contract_projectselector", "select", array("atkfilter"=>"projectid=[id]","atktarget"=>atkurlencode($target_url)));
 		$select = session_url($select_url,SESSION_NESTED);

 		//Add link to result
    return $result."&nbsp;&nbsp;&nbsp;".href($select,atktext("selectandaddnewproject","organization","contracts"))."<br />";
  }


   /**
   * Make the dropdownlist show an 'empty' option.
   *
   * Hack! Needed to make the dropdownlist show an 'empty' option, even though the field is obligatory.
   * todo: remove this when atk has a feature for this.
   *
   * @param type name description
   * @return type description
   */
  function contracttype_edit($record, $prefix="", $mode="")
  {
  	$attr = &$this->getAttribute("contracttype");

  	//Check if the behaviour change is actually needed.
  	if($attr->hasFlag(AF_OBLIGATORY))//yes needed
  	{
  		//Make the dropdownlist show an 'empty' option, even though the field is obligatory.
  		$attr->m_flags ^= AF_OBLIGATORY;
			$result = $attr->edit($record, $prefix, $mode);
			//Change back to normal behaviour
			$attr->m_flags |= AF_OBLIGATORY;
			return $result;
  	}
  	else   //not needed
			return $attr->edit($record, $prefix, $mode);
  }

  /**
   * Make the dropdownlist show an 'empty' option.
   *
   * Hack! Needed to make the dropdownlist show an 'empty' option, even though the field is obligatory.
   * todo: remove this when atk has a feature for this.
   *
   * @param type name description
   * @return type description
   */
  function customer_edit($record, $prefix="", $mode="")
  {
  	$attr = &$this->getAttribute("customer");

  	//Check if the behaviour change is actually needed.
  	if($attr->hasFlag(AF_OBLIGATORY))//yes needed
  	{
  		//Make the dropdownlist show an 'empty' option, even though the field is obligatory.
  		$attr->m_flags ^= AF_OBLIGATORY;
			$result = $attr->edit($record, $prefix, $mode);
			//Change back to normal behaviour
			$attr->m_flags |= AF_OBLIGATORY;
			return $result;
  	}
  	else   //not needed
			return $attr->edit($record, $prefix, $mode);
  }

   /**
   * Make the dropdownlist show an 'empty' option.
   *
   * Hack! Needed to make the dropdownlist show an 'empty' option, even though the field is obligatory.
   * todo: remove this when atk has a feature for this.
   *
   * @param type name description
   * @return type description
   */
  function billing_period_edit($record, $prefix="", $mode="")
  {
  	$attr = &$this->getAttribute("billing_period");

  	//Check if the behaviour change is actually needed.
  	if($attr->hasFlag(AF_OBLIGATORY))//yes needed
  	{
  		//Make the dropdownlist show an 'empty' option, even though the field is obligatory.
  		$attr->m_flags ^= AF_OBLIGATORY;
			$result = $attr->edit($record, $prefix, $mode);
			//Change back to normal behaviour
			$attr->m_flags |= AF_OBLIGATORY;
			return $result;
  	}
  	else   //not needed
			return $attr->edit($record, $prefix, $mode);
  }



  function action_linkproject(&$handler)
 	{
 	  $db = &atkGetDb();
 	  $contractid = $db->escapeSQL($this->m_postvars["contractid"]);
 	  $projectid = $db->escapeSQL($this->m_postvars["projectid"]);
    if ($projectid!="" && $contractid != "")
    {
      $db->query("UPDATE project SET contract_id = $contractid WHERE project.id = ".$projectid);
    }
    $this->redirect(session_url("", SESSION_BACK, 2));
 	}

	function action_admin(&$handler)
	{
	  global $g_sessionManager;
	  $this->m_archive = $g_sessionManager->pageVar("archive");

	  if ($this->m_archive==1)
	  {
	    $this->addFilter("contract.status='archived'");
	  }
	  else
	  {
	    $this->addFilter("contract.status='active'");
	  }

	  return $handler->action_admin();
	}

	function action_edit(&$handler)
    {
    	$this->registerLoadScripts();
      return $handler->action_edit();
    }

    function action_add(&$handler)
    {
    	$this->registerLoadScripts();
    	return $handler->action_add();
    }

	/**
   * Register scripts for visibility of period_price
   *
   * Function registers a script that runs on page load.
   * script checks if the period price should be visible or not
   */
  function registerLoadScripts()
  {
  	$page = &$this->getPage();
    $page->register_scriptcode("
      function check_billing_period(srcid, destid, destVarId) {
        var src = document.getElementById(srcid);
    		var dest_ar = document.getElementById(destid);
    		var dest = document.getElementById(destVarId);
    		if(src.options[src.selectedIndex].value == 'no_billing_period')
    		{
	    		dest_ar.style.visibility = 'hidden';
    			dest.value = '';
    		}
    		else
    		{
    			dest_ar.style.visibility = 'visible';
    		}
      }
    ");

    $page->register_loadscript("check_billing_period('billing_period', 'ar_period_price', 'period_price');");
  }

	function adminFooter()
	{
	  $res = "" ;
	  if ($this->m_archive!=1)
	  {
	    return atktext("onlyactiverecordsareshown")." ".href(dispatch_url($this->atknodetype(),$this->m_action,array("archive"=>1)),
	                                                    atktext('clicktoviewarchive', $this->m_type, $this->m_module))."<br>";
	  }
	  else
	  {
	    return atktext("youareinthearchive")." ".href(dispatch_url($this->atknodetype(),$this->m_action,array("archive"=>0)), 
	                                             atktext('clicktoviewactiverecords', $this->m_type, $this->m_module))."<br>";
	  }
	  return $res."<br>";
	}

	function period_price_edit($rec)
  {
    return $this->m_attribList["period_price"]->edit($rec)." ".atkconfig("currency_symbol");
  }

  function descriptor_commit()
  {
    return "[description]";
  }

  function descriptor($rec)
  {
    $ret = "";
    if(isset($rec["contractnumber"]) && $rec["contractnumber"]!="") $ret.=$rec["contractnumber"];
    if(isset($rec["contractname"]) && $rec["contractname"]!="")
    {
      if($ret!="") $ret.=" - ";
      $ret.=$rec["contractname"];
    }
    return $ret;
  }



  function initial_values()
  {

	  return array(	"enddate" =>	array("year"=>(date("Y")+1),
	  																	"month"=>date("m"),
	  														"day"=>date("d")));
  }

  //todo: updateDb doesn't update the status for some reason. Query should be changed to using updateDb.
  // but for that the updateDb problem should be found.
  function postUpdate($rec)
  {
  	$expired = false;

  	//Does this contract have an enddate?
  	if($rec['enddate'] != array() && isset($rec['enddate']))
  	{
	  	//get current date as a timestamp
	  	$now = mktime(12,0,0,date("m"),date("d"),date("Y"));

	  	//get enddate of record as a timestamp.
	  	$enddate = mktime(12,0,0,$rec['enddate']['month'],$rec['enddate']['day'],$rec['enddate']['year']);

	  	//did it expire?
  		$expired = ($now > $enddate);
  	}


  	//When status changes to 'archived' All linked projects are set to non-active.
  	//Or if the enddate has passed, all linked projects are set to non-active as well.
  	if(($rec['status'] == 'archived') || $expired)
  	{
  		$db = &atkGetDb();

  		//If contract expired, set its status to archived
  		if($expired)
  		{
  			//set contract status to archived
  			$query = "UPDATE contract SET contract.status='archived' WHERE contract.id='".$rec['id']."'";
  			$db->query($query);
  		}

  		$contractid = $rec['id'];
  		$node = &atkGetNode("project.project");

  		//Select projects linked to this contract that are active.
  		$projects = $node->selectDb("(project.contract_id='$contractid' AND project.status='active')","","","",array("id","name"));
  		foreach($projects as $record)
  		{
  			$query = "UPDATE project SET project.status='nonactive' WHERE project.id='".$record['id']."'";
  			$db->query($query);
  		}
  	}
  	return true;
  }
}

?>
